<?php

namespace Kountac\KountacBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Produits_3Repository extends EntityRepository
{
    public function byCategorie($categorie) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.categorie = :categorie')
                ->andWhere('u.stock >= :seuil')
                ->orderBy('u.id')
                ->setParameter('categorie', $categorie)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
   
    public function byCollection($collection) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.collection = :collection')
                ->andWhere('u.stock >= :seuil')
                ->orderBy('u.id')
                ->setParameter('seuil', '1')
                ->setParameter('collection', $collection);
        return $qb->getQuery()->getResult();
    }
    
    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('u')
                ->Select('u')
                ->Where('u.id IN (:array)')
                ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }
    
    public function getProduct_3($produit2) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.produit_2 = :produit2')
                ->setParameter('produit2', $produit2)
                ->orderBy('u.id', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function recherche($chaine) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.nom like :chaine')
                ->andWhere('u.description like :chaine')
                ->andWhere('u.stock >= :seuil')
                ->setParameter('chaine', '%'.$chaine.'%')
                ->setParameter('seuil', '1')
                ->orderBy('u.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopularite() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.popularite', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopulariteTime() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.dateachat', 'DESC')
                ->setParameter('seuil', '1')
                ->setMaxResults(6)
                ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopulariteMenu() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.popularite', 'DESC')
                ->setParameter('seuil', '1')
                ->setMaxResults(3)
                ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByNouveaute() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.id', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByReduction() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.reduction', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByCategorie($categorie, $id) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.categorie = :categorie')
                ->andWhere('u.id != :id')
                ->andWhere('u.stock >= :seuil')
                ->setParameter('id', $id)
                ->setParameter('categorie', $categorie)
                ->setParameter('seuil', '1')
                ->orderBy('u.popularite', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByTaille($taille, $id) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.taille = :taille')
                ->andWhere('u.id != :id')
                ->andWhere('u.stock >= :seuil')
                ->setParameter('taille', $taille)
                ->setParameter('id', $id)
                ->setParameter('seuil', '1')
                ->orderBy('u.popularite', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByMarque($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.marque = :user')
                ->setParameter('user', $user)
                ->orderBy('u.id', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByStock($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock <= :stock')
                ->andWhere('u.marque = :user')
                ->setParameter('user', $user)
                ->setParameter('stock', '2')
                ->orderBy('u.stock', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsAdminByStock() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock <= :stock')
                ->setParameter('stock', '2')
                ->orderBy('u.stock', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsBySales($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.dateachat != :null')
                ->andWhere('u.marque = :user')
                ->setParameter('user', $user)
                ->setParameter('null', 'NULL')
                ->orderBy('u.dateachat', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
}
