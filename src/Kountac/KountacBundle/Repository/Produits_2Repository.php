<?php

namespace Kountac\KountacBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Produits_2Repository extends EntityRepository
{

    public function findByRand() 
    {
        return  $this->createQueryBuilder('u')
            ->select('u')
            ->addOrderBy('u.randValue')
            ->getQuery()
            ->getResult();
    }

    public function getProduitByMarque($marque_id)
    {
        $qb = $this->createQueryBuilder('p2')
            ->select('p2')
            ->leftJoin('p2.produit_1', 'p1')
            ->addSelect('p1')
            ->where('p1.marque = :marque')
            ->setParameter('marque', $marque_id)
            ->orderBy('p2.randValue', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function getProduitByMarqueId($marque_id)
    {
        $qb = $this->createQueryBuilder('p2')
            ->select('p2')
            ->leftJoin('p2.produit_1', 'p1')
            ->addSelect('p1')
            ->where('p1.marque.id = :id')
            ->setParameter('id', $marque_id);
        return $qb->getQuery()->getResult();
    }

    public function getAll()
    {
        $qb = $this->createQueryBuilder('p2')
            ->select('p2')
            ->orderBy('p2.randValue', 'DESC');
        return $qb->getQuery()->getResult();
    }


    public function getAllByGroup()
    {
        $qb = $this->createQueryBuilder('p2')
            ->select('p2')
            ->groupBy('p2.produit_1');
        return $qb->getQuery()->getResult();
    }

    public function getPrixEuro() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('MIN(p2.europrix) AS mineuro, MAX(p2.europrix) AS maxeuro');
        return $qb->getQuery()->getResult();
    }
    
    public function getPrixCFA() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('MIN(p2.cfaprix) AS mincfa, MAX(p2.cfaprix) AS maxcfa');
        return $qb->getQuery()->getResult();
    }
    
    public function getPrixUSA() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('MIN(p2.usaprix) AS minusa, MAX(p2.usaprix) AS maxusa');
        return $qb->getQuery()->getResult();
    }
    
    public function getPrixLivre() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('MIN(p2.livreprix) AS minlivre, MAX(p2.livreprix) AS maxlivre');
        return $qb->getQuery()->getResult();
    }
    
    public function getPrixNaira() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('MIN(p2.nairaprix) AS minnaira, MAX(p2.nairaprix) AS maxnaira');
        return $qb->getQuery()->getResult();
    }
    
    public function getPrixAll() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('MIN(p2.allprix) AS minall, MAX(p2.allprix) AS maxall');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri($prix, $motif, $taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T1($minPrix, $maxPrix, $devise) 
    {
        if($devise == "cfa"){
            $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->Where('p2.cfaprix >= :minPrix')
                ->andWhere('p2.cfaprix <= :maxPrix')
                ->setParameter('maxPrix', $maxPrix)
                ->setParameter('minPrix', $minPrix)
                ->orderBy('p2.cfaprix', 'ASC');
            return $qb->getQuery()->getResult();
        }else if($devise == "usa"){
            $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->Where('p2.usaprix >= :minPrix')
                ->andWhere('p2.usaprix <= :maxPrix')
                ->setParameter('maxPrix', $maxPrix)
                ->setParameter('minPrix', $minPrix)
                ->orderBy('p2.usaprix', 'ASC');
            return $qb->getQuery()->getResult();
            
        }else if($devise == "livre"){
            $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->Where('p2.livreprix >= :minPrix')
                ->andWhere('p2.livreprix <= :maxPrix')
                ->setParameter('maxPrix', $maxPrix)
                ->setParameter('minPrix', $minPrix)
                ->orderBy('p2.livreprix', 'ASC');
            return $qb->getQuery()->getResult();
            
        }else if($devise == "naira"){
            $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->Where('p2.nairaprix >= :minPrix')
                ->andWhere('p2.nairaprix <= :maxPrix')
                ->setParameter('maxPrix', $maxPrix)
                ->setParameter('minPrix', $minPrix)
                ->orderBy('p2.nairaprix', 'ASC');
            return $qb->getQuery()->getResult();
            
        }else if($devise == "all"){
            $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->Where('p2.allprix >= :minPrix')
                ->andWhere('p2.allprix <= :maxPrix')
                ->setParameter('maxPrix', $maxPrix)
                ->setParameter('minPrix', $minPrix)
                ->orderBy('p2.allprix', 'ASC');
            return $qb->getQuery()->getResult();
            
        }else if($devise == "euro"){
            $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->Where('p2.europrix >= :minPrix')
                ->andWhere('p2.europrix <= :maxPrix')
                ->setParameter('maxPrix', $maxPrix)
                ->setParameter('minPrix', $minPrix)
                ->orderBy('p2.europrix', 'ASC');
            return $qb->getQuery()->getResult();
            
        }
        /*$qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->where('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('prix', $maxPrix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();*/
    }
    
    public function getProductByTri_T2($motif) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->where('p2.libelle IN (:motif)')
                ->setParameter('motif', $motif)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T3($prix, $motif) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T4($taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->where('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T5($prix, $taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T6($motif, $taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->where('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->setParameter('motif', $motif)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T7($prix, $motif, $taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T8($marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T9($prix, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T10($motif, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.libelle IN (:motif)')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T11($prix, $motif, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T12($taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T13($prix, $taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T14($motif, $taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T15($prix, $motif, $taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T16($categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->setParameter('categorie', $categorie)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T17($prix, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('categorie', $categorie)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T18($motif, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.libelle IN (:motif)')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T19($prix, $motif, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T20($taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T21($prix, $taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T22($motif, $taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T23($prix, $motif, $taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T24($marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T25($prix, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.europrix <= :prix')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T26($motif, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.libelle IN (:motif)')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T27($prix, $motif, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T28($taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T29($prix, $taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T30($motif, $taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.libelle IN (:motif)')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p3.taille = :taille_min')
                ->orWhere('p3.taille = :taille_max')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->setParameter('taille_max', $taille + 2)
                ->setParameter('taille_min', $taille - 2)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function byCategorie_2($categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('p1.categorie = :categorie')
                ->orWhere('cat.parent = :categorie')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.libelle')
                ->setParameter('categorie', $categorie)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function byCategorie_1($categorie, $categories_enfants) 
    {
        if($categorie==1){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '6')
                    ->setParameter('max', '30');
            return $qb->getQuery()->getResult();

        }else if($categorie==2){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '41')
                    ->setParameter('max', '108');
            return $qb->getQuery()->getResult();

        }else if($categorie==3){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '34')
                    ->setParameter('max', '36');
            return $qb->getQuery()->getResult();

        }else if($categorie==4){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '156')
                    ->setParameter('max', '165');
            return $qb->getQuery()->getResult();

        }else if($categorie==231){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '231')
                    ->setParameter('max', '263');
            return $qb->getQuery()->getResult();

        }else if($categorie==264){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '266')
                    ->setParameter('max', '269');
            return $qb->getQuery()->getResult();

        }else if($categorie==265){
            $qb = $this->createQueryBuilder('p2')
                    ->select('p2')
                    ->leftJoin('p2.produit_1', 'p1')
                    ->addSelect('p1')
                    ->leftJoin('p1.categorie', 'cat')
                    ->addSelect('cat')
                    ->where('p1.categorie >= :min')
                    ->andWhere('p1.categorie <= :max')
                    ->orderBy('p2.randValue')
                    ->setParameter('min', '271')
                    ->setParameter('max', '272');
            return $qb->getQuery()->getResult();

        }
    }
    
    public function byNewCategorie($categorie, $categories_enfants) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('p1.categorie = :categorie')
                ->orWhere('cat.id IN (:categories_enfants)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categorie', $categorie)
                ->setParameter('categories_enfants', $categories_enfants)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function byBestCategorie($categorie, $categories_enfants) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('p1.categorie = :categorie')
                ->orWhere('cat.id IN (:categories_enfants)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categorie', $categorie)
                ->setParameter('categories_enfants', $categories_enfants)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function byCollection($collection) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.collection = :collection')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.id')
                ->setParameter('seuil', '1')
                ->setParameter('collection', $collection);
        return $qb->getQuery()->getResult();
    }
    
	public function byIdeesLook($look) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.looks = :look')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('seuil', '1')
                ->setParameter('look', $look);
        return $qb->getQuery()->getResult();
    }
    
    /* Destockage de tous les ptoduits de la catégorie "femmes"*/
    public function getCategoriesAllFemmesDestockage($categoriesHautsFemmes, $categoriesBasFemmes, $categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
            
    /* Destockage de la catégorie "femmes"*/
    public function getCategoriesFemmesDestockage($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
   
    
    /* Destockage de tous les ptoduits de la catégorie "femmes"*/
    public function getCategoriesAllHommesDestockage($categoriesHautsHommes, $categoriesBasHommes, $categoriesEnsemblesHommes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsHommes)')
                ->orWhere('cat.id IN (:categoriesBasHommes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesHommes)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categoriesHautsHommes', $categoriesHautsHommes)
                ->setParameter('categoriesBasHommes', $categoriesBasHommes)
                ->setParameter('categoriesEnsemblesHommes', $categoriesEnsemblesHommes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
            
    /* Destockage de la catégorie "femmes"*/
    public function getCategoriesHommesDestockage($categoriesHommes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHommes)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categoriesHommes', $categoriesHommes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    
    /* Destockage de tous les ptoduits de la catégorie "femmes"*/
    public function getCategoriesAllEnfantsDestockage($categoriesHautsEnfants, $categoriesBasEnfants, $categoriesEnsemblesEnfants) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsEnfants)')
                ->orWhere('cat.id IN (:categoriesBasEnfants)')
                ->orWhere('cat.id IN (:categoriesEnsemblesEnfants)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categoriesHautsEnfants', $categoriesHautsEnfants)
                ->setParameter('categoriesBasEnfants', $categoriesBasEnfants)
                ->setParameter('categoriesEnsemblesEnfants', $categoriesEnsemblesEnfants)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
            
    /* Destockage de la catégorie "Enfants"*/
    public function getCategoriesEnfantsDestockage($categoriesEnfants) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesEnfants)')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.reduction', 'DESC')
                ->setParameter('categoriesEnfants', $categoriesEnfants)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de la catégorie "femmes" en Euro */
    public function getCategoriesFemmesSurMesureEuro($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.europrixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de tous les produits de la catégorie "femmes" Euro*/
    public function getCategoriesAllFemmesSurMesureEuro($categoriesHautsFemmes,$categoriesBasFemmes,$categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.europrixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de la catégorie "femmes" en All */
    public function getCategoriesFemmesSurMesureAll($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.allprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de tous les produits de la catégorie "femmes" All*/
    public function getCategoriesAllFemmesSurMesureAll($categoriesHautsFemmes,$categoriesBasFemmes,$categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.allprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de la catégorie "femmes" en Livre */
    public function getCategoriesFemmesSurMesureLivre($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.livreprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de tous les produits de la catégorie "femmes" Livre*/
    public function getCategoriesAllFemmesSurMesureLivre($categoriesHautsFemmes,$categoriesBasFemmes,$categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.livreprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de la catégorie "femmes" en Usa */
    public function getCategoriesFemmesSurMesureUsa($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.usaprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de tous les produits de la catégorie "femmes" Usa*/
    public function getCategoriesAllFemmesSurMesureUsa($categoriesHautsFemmes,$categoriesBasFemmes,$categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.usaprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de la catégorie "femmes" en Naira */
    public function getCategoriesFemmesSurMesureNaira($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.nairaprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de tous les produits de la catégorie "femmes" Naira*/
    public function getCategoriesAllFemmesSurMesureNaira($categoriesHautsFemmes,$categoriesBasFemmes,$categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.nairaprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de la catégorie "femmes" en Cfa */
    public function getCategoriesFemmesSurMesureCfa($categoriesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.cfaprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesFemmes', $categoriesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    /* Sur mesure de tous les produits de la catégorie "femmes" Cfa*/
    public function getCategoriesAllFemmesSurMesureCfa($categoriesHautsFemmes,$categoriesBasFemmes,$categoriesEnsemblesFemmes) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('cat.id IN (:categoriesHautsFemmes)')
                ->orWhere('cat.id IN (:categoriesBasFemmes)')
                ->orWhere('cat.id IN (:categoriesEnsemblesFemmes)')
                ->andWhere('p1.stock >= :seuil')
                ->andWhere('p2.cfaprixCommande is not Null')
                ->orderBy('p2.id', 'DESC')
                ->setParameter('categoriesHautsFemmes', $categoriesHautsFemmes)
                ->setParameter('categoriesBasFemmes', $categoriesBasFemmes)
                ->setParameter('categoriesEnsemblesFemmes', $categoriesEnsemblesFemmes)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('u')
                ->Select('u')
                ->Where('u.id IN (:array)')
                ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }
    
    public function findAvatarByMarque($mannequins,$marque_id)
    {
        $qb = $this->createQueryBuilder('u')
                ->Select('u')
                ->leftJoin('u.mannequin', 'p2')
                ->leftJoin('u.produit_1', 'p1')
                ->addSelect('p1')
                ->addSelect('p2')
                ->where('p1.marque = :marque')
                ->andWhere('p2.id IN (:mannequins)')
                ->orderBy('p2.id')
                ->setParameter('mannequins', $mannequins)
                ->setParameter('marque', $marque_id)
                
                ;
        return $qb->getQuery()->getResult();
    }

    public function recherche($chaine) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.nom like :chaine')
                ->orWhere('p1.description like :chaine')
                ->andWhere('p1.stock >= :seuil')
                ->setParameter('chaine', '%'.$chaine.'%')
                ->setParameter('seuil', '1')
                ->orderBy('p2.libelle', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopularite() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.popularite', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopulariteTime() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.dateachat', 'DESC')
                ->setParameter('seuil', '1')
                ->setMaxResults(6)
                ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopulariteMenu() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.stock >= :seuil')
                ->orderBy('p1.popularite', 'DESC')
                ->setParameter('seuil', '1')
                ->setMaxResults(3)
                ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByNouveaute() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.id', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByReduction() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.reduction', 'DESC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduct_2($produit1) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.produit_1 = :produit1')
                ->setParameter('produit1', $produit1)
                ->orderBy('u.id', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByTaille($taille, $id) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.taille = :taille')
                ->orWhere('u.taille = :taille_min')
                ->orWhere('u.taille = :taille_max')
                ->andWhere('u.id != :id')
                ->andWhere('u.stock >= :seuil')
                ->setParameter('taille', $taille)
                ->setParameter('taille_min', $taille - 2)
                ->setParameter('taille_max', $taille + 2)
                ->setParameter('id', $id)
                ->setParameter('seuil', '1')
                ->orderBy('u.popularite', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByMarque($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.marque = :user')
                ->setParameter('user', $user)
                ->orderBy('u.id', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByStock($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock <= :stock')
                ->andWhere('u.marque = :user')
                ->setParameter('user', $user)
                ->setParameter('stock', '2')
                ->orderBy('u.stock', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsAdminByStock() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock <= :stock')
                ->setParameter('stock', '2')
                ->orderBy('u.stock', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsBySales($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.dateachat != :null')
                ->andWhere('u.marque = :user')
                ->setParameter('user', $user)
                ->setParameter('null', 'NULL')
                ->orderBy('u.dateachat', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
}
